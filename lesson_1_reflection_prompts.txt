How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    The places where there were code differences were identified rigth away, so I did not had to search the files line by line for those differences.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    I could see the evolution of the file and how new features were implemented or optimized along the way.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pros: Avoid saving in pointless or unfinished tasks; Avoid missing saving between significant changes in the files.
    Cons: Forgetting to save or commit between two very different versions.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    For programs that rely on several files, no doubt that multi-file management is an excellent options as it allows for saving a complete working package in each commit.

How can you use the commands git log and git diff to view the history of files?

    With git log we can see how the history of the file evolved. Git diff allows the identification of the changes made from one commit to the other, hence providing a way of see exactly what as changed.

How might using version control make you more confident to make changes that
could break something?

    As all of the previous versions of the code are available, we have m a lot more security making any kind of change.

Now that you have your workspace set up, what do you want to try using Git for?

    Work on my Android Apps!!!!
